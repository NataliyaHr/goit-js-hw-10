{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n\n        if (userSelectedDate <= new Date()) {\n            iziToast.error({ title: \"Error\", message: \"Please choose a date in the future\" });\n            startButton.disabled = true;\n        } else {\n            startButton.disabled = false;\n        }\n    }\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n    startButton.disabled = true;\n    dateTimePicker.disabled = true;\n\n    timerInterval = setInterval(() => {\n        const timeRemaining = userSelectedDate - new Date();\n\n        if (timeRemaining <= 0) {\n            clearInterval(timerInterval);\n            dateTimePicker.disabled = false;\n            return;\n        }\n\n        const time = convertMs(timeRemaining);\n        updateTimerInterface(time);\n    }, 1000);\n});\n\nfunction updateTimerInterface({ days, hours, minutes, seconds }) {\n    daysValue.textContent = addLeadingZero(days);\n    hoursValue.textContent = addLeadingZero(hours);\n    minutesValue.textContent = addLeadingZero(minutes);\n    secondsValue.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n"],"names":["startButton","dateTimePicker","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","timeRemaining","time","convertMs","updateTimerInterface","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"0IAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EAE9BH,GAAoB,IAAI,MACxBI,EAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,EAChFV,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE9B,CACL,EAEAW,EAAUV,EAAgBO,CAAO,EAEjCR,EAAY,iBAAiB,QAAS,IAAM,CACxCA,EAAY,SAAW,GACvBC,EAAe,SAAW,GAE1BM,EAAgB,YAAY,IAAM,CAC9B,MAAMK,EAAgBN,EAAmB,IAAI,KAE7C,GAAIM,GAAiB,EAAG,CACpB,cAAcL,CAAa,EAC3BN,EAAe,SAAW,GAC1B,MACH,CAED,MAAMY,EAAOC,EAAUF,CAAa,EACpCG,EAAqBF,CAAI,CAC5B,EAAE,GAAI,CACX,CAAC,EAED,SAASE,EAAqB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7DjB,EAAU,YAAckB,EAAeJ,CAAI,EAC3Cb,EAAW,YAAciB,EAAeH,CAAK,EAC7Cb,EAAa,YAAcgB,EAAeF,CAAO,EACjDb,EAAa,YAAce,EAAeD,CAAO,CACrD,CAEA,SAASC,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,SAASP,EAAUQ,EAAI,CAMnB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C"}